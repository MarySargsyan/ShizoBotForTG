import { config } from 'dotenv';
import { Bot, GrammyError, HttpError, Keyboard, InlineKeyboard } from "grammy";

config();

const myId = process.env.MY_ID;
const dId = process.env.D_ID;

const BOT_API_KEY = process.env.BOT_API_KEY;
if (!BOT_API_KEY) {
    throw new Error('Missing BOT_API_KEY environment variable');
  }

const bot = new Bot(BOT_API_KEY); 

bot.api.setMyCommands([
    {
        command: 'start', description: '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'
    },
    {
        command: 'mood', description: '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ'
    },
    // {
    //     command: 'location', description: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π'
    // },
    // {
    //     command: 'numbers', description: '–¶–∏—Ñ—Ä—ã'
    // }
    // ,
    {
        command: 'chanals', description: '–ö–∞–Ω–∞–ª—ã'
    }
])

bot.hears("–•–æ—Ä–æ—à–æ",
    (ctx) => ctx.react("üéâ")
)

//–ø—Ä–∏–º–µ—Ä —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∞–π–¥–∏
bot.command("start").filter((ctx) => {
    return ctx.from?.id === myId;
}, 
async(ctx)=>{
    await ctx.react("üçì")
    await ctx.reply(`<span class="tg-spoiler">–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —Ö–æ–∑—è–∏–Ω~~</span> ${myId}`, {
        reply_parameters:{message_id:ctx.msgId},     //–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        parse_mode: 'HTML' //–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ HTML –∫ –æ—Ç–≤–µ—Ç—É
    })}
)

bot.command("start", (ctx) => ctx.reply(`–ü—Ä–∏–≤–µ—Ç!${myId}`));

//Keyboard
bot.command('mood', async(ctx) =>{
    const moodLables = ['–•–æ—Ä–æ—à–æ','–ù–æ—Ä–º','–ü–ª–æ—Ö–æ']
    const rows = moodLables.map((lable) => {
        return[
            Keyboard.text(lable)
        ]
    })
    const moodKeyboard = Keyboard.from(rows).resized().oneTime()
    await ctx.reply("–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?", {
        reply_markup: moodKeyboard
    })
})

//InineKeyboard
bot.command('chanals', async(ctx) =>{
    // const inlineKeyboard = new InlineKeyboard()
    // .text('1', 'button-1')
    // .text('2', 'button-2')
    // .text('3', 'button-3');
    const inlineKeyboard = new InlineKeyboard()
    .url('–ö–ê–ü–ò–¢–ê–õ–¨–ù–ê–Ø –®–ò–ó–ê', 'https://t.me/capitalshiza')
    .url('–ß–µ–±—É—Ä–∞—à–Ω–∞—è', 'https://t.me/+AsQ7EmEAOcphOTNi')

    await ctx.reply("–¢–æ–ø-2 –ª—É—á—à–∏—Ö –¢–ì–ö", {
        reply_markup: inlineKeyboard
    })
})

//–ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É
bot.callbackQuery(/button-[1-3]/, async(ctx) => {
    await ctx.answerCallbackQuery()
    await ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ü–∏—Ñ—Ä—É ${ctx.callbackQuery.data}`)
}
)

//–º–æ–∂–µ–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –æ–±—å–µ–∫—Ç—É –∫–Ω–æ–ø–∫–∏, –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É
// bot.on('callback_query:data', 
//     async(ctx) => {
//         await ctx.answerCallbackQuery()
//         await ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ü–∏—Ñ—Ä—É ${ctx.callbackQuery.data}`)
//     }
// )

bot.hears([/–®–∏–∑/,/–®–∏–∑–∏–∫/, /—à–∏–∑/,/—à–∏–∑–∏–∫/,/–®–∏–∑–æ–±–æ—Ç/, /—à–∏–∑–æ–±–æ—Ç/],
    (ctx) => ctx.reply("–û, —è!")
)

bot.command('location', async(ctx) => {
    const shareKeyBoard = new Keyboard().requestLocation("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π").resized().oneTime()
    await ctx.reply('–Ω–∞–∂–º–∏, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è', {
        reply_markup: shareKeyBoard
    })
})


// errors catches
bot.catch((err)=> {
    const ctx = err.ctx;
    console.error(`Error while handling update ${ctx.update.update_id}:`);
    const e = err.error;

    if (e instanceof GrammyError){
        console.error("Error in erquest:", e.description)
    }else if (e instanceof HttpError){
        console.error("Could not contact Telegram:", e)
    }else{
        console.error("Unknown error:", e)
    }
}
)

bot.start();